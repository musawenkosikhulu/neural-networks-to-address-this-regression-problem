# -*- coding: utf-8 -*-
"""musawenkosi_DS_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YBD7j2SHB0LdDu5nF8RO_of05tmHho6P

**I**  have  provided  a  dataset  which  has  a  number  of  features  and  a  single  target (column called ``target'').  Your  task  is  to  use  neural  networks  to address  this  regression problem.

Import the dataset using Pandas as follows:



```
pandas.read_csv("https://protect-za.mimecast.com/s/vYKICAnX51iR2wOPiM4hPa")
```
"""

import numpy as np
np.random.seed(7134) # for reproducibility
import pandas #This line of code is for opening the dataset in the csv
import tensorflow as tf #This line of code used to import tensorflows
from tensorflow.keras import Sequential #This line of code is creating a sequential for the model
from tensorflow.keras.layers import Dense #This line of code is creating the layers of the neural network model
from tensorflow.keras import metrics #This line of code is for getting the metric of model
from tensorflow.keras.wrappers.scikit_learn import KerasRegressor #This line of code is for creating the regression model
from sklearn.metrics import mean_squared_error #This line oof code is for checking the mean squared error of the model
from sklearn.preprocessing import StandardScaler #This line of code is for processing the data for standardization
from sklearn.model_selection import train_test_split #This line of code is for spliting the data fro training and testing
import matplotlib.pyplot as plt #This line of code is ploting the data for visualization

dataframe = pandas.read_csv("https://protect-za.mimecast.com/s/vYKICAnX51iR2wOPiM4hPa") #This line of code is for reading the dat in the csv
dataset = dataframe.values #This line of code is making the dat look nice in the table formart

dataframe.head() #This line of code is for check how our data look like.

dataframe.shape #This line of code checks for the shape of the data so we know after scaling it is the same shape

scaled_data = StandardScaler().fit_transform(dataframe.values) #This line of code scale the data in a standard way
scaled_data #This code prints out the code I scaled

scaled_data.shape #This line of code checks if the scaled data still the same shape as before

"""### **In this assignment we will be using neural networks to address this regression problem**"""

X = scaled_data[:,0:8] #This line of code separate the features from the target for traing perpuse 
Y = scaled_data[:,8] #This line of code separate the Target feature

X.shape #This code checks the shape of the data we have.

Y.shape #This code checks the shape of the features.

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.3) #This splits the data into training and testing.

"""### **This code below creates a neural network model**"""

# define the model
def NueralNetwork():
    # create model
    model = Sequential()
    
    # add one fully connected layer
    model.add(Dense(units = 16, input_dim=8, activation='relu'))
    # add a fully connected layer for the output
    model.add(Dense(units=1,activation='relu'))
    
    # Compile model
    model.compile(loss='mse', optimizer='adam',metrics=[metrics.mse])
    
    return model

model = NueralNetwork() #This loads the model.

model.summary() #This code gives the summary of the model

history = model.fit(X_train, Y_train, epochs=10, batch_size=1, verbose=1) #This line of code fits

prediction = model.predict(X_test) #This line of code do the prediction of the model

mean_squared_error(Y_test, prediction) #This line of checks the mean squared error of the model

"""### **This code below plots the fit of the model for interpretion**"""

plt.figure(figsize=(8, 8))
plt.plot(history.history['mean_squared_error'])
plt.title('Model loss')
plt.ylabel('Mean Squared Error')
plt.xlabel('Epoch')
plt.show()

"""### **The model converges very quickly meaning the model is good**"""